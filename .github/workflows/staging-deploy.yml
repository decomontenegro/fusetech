name: Staging Deployment

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  test:
    name: Test & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm run test

      - name: Run linting
        run: npm run lint

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "PREVIEW_URL=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with Preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const preview_url = '${{ steps.deploy.outputs.PREVIEW_URL }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Staging Preview Deployed!**\n\nüîó Preview: ${preview_url}\n\nüìã **Testing Checklist:**\n- [ ] Authentication flow works\n- [ ] Strava integration connects\n- [ ] Activities import correctly\n- [ ] Token rewards calculate\n- [ ] Mobile responsive\n- [ ] PWA installs properly\n\n‚è±Ô∏è This preview will be available for 7 days.`
            });

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        env:
          NEXT_PUBLIC_ENVIRONMENT: staging
          NODE_ENV: production
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Staging
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Alias to Staging Domain
        run: vercel alias set ${{ secrets.VERCEL_PROJECT_NAME }}-staging.vercel.app staging.fusetech.app --token=${{ secrets.VERCEL_TOKEN }}

      - name: Run E2E Tests on Staging
        continue-on-error: true
        run: |
          # Run E2E tests against staging
          # npm run test:e2e:staging
          echo "E2E tests would run here"

      - name: Notify Deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const run_id = context.runId;
            
            // Create deployment
            const deployment = await github.rest.repos.createDeployment({
              owner,
              repo,
              ref: context.sha,
              environment: 'staging',
              auto_merge: false,
              required_contexts: [],
              description: 'Staging deployment'
            });
            
            // Update deployment status
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: 'https://staging.fusetech.app',
              description: 'Deployed to staging'
            });

  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Audit Staging Site
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://staging.fusetech.app
            https://staging.fusetech.app/marketplace
            https://staging.fusetech.app/dashboard
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Comment Results
        uses: actions/github-script@v7
        with:
          script: |
            const results = ${{ steps.lighthouse.outputs.resultsPath }};
            // Process and comment Lighthouse results
            console.log('Lighthouse audit complete');

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Security Audit
        run: npm audit --production

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high