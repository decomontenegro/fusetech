name: Deploy FUSEtech

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Run build test
        run: npm run build

      - name: Run integration tests
        run: |
          node scripts/test-integration.js
          node scripts/test-token-calculation.js
          node scripts/test-auth-flow.js

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Test Docker build
        run: |
          docker build -t fusetech:staging .
          docker run --rm -d -p 3000:3000 --name fusetech-test fusetech:staging
          sleep 10
          curl -f http://localhost:3000/api/health || exit 1
          docker stop fusetech-test

      - name: Deploy notification
        run: |
          echo "ðŸš€ Staging deployment completed successfully!"
          echo "âœ… Docker image built and tested"
          echo "âœ… Health check passed"
          echo "ðŸ“¦ Image: fusetech:staging"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy-staging]
    if: github.event_name == 'workflow_dispatch'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production application
        run: npm run build

      - name: Create production Docker image
        run: |
          docker build -t fusetech:production .
          docker tag fusetech:production ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production

      - name: Test production image
        run: |
          docker run --rm -d -p 3000:3000 --name fusetech-prod-test fusetech:production
          sleep 15
          curl -f http://localhost:3000/api/health || exit 1
          docker stop fusetech-prod-test

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: FUSEtech Release v${{ github.run_number }}
          body: |
            ðŸš€ **FUSEtech Production Deployment**

            **Deployed**: ${{ github.sha }}
            **Timestamp**: ${{ github.event.head_commit.timestamp }}
            **Author**: ${{ github.event.head_commit.author.name }}

            **Changes in this release:**
            ${{ github.event.head_commit.message }}

            **Docker Image**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production`

            ---

            ### ðŸ§ª Validated Features:
            - âœ… Database schema and integration
            - âœ… Authentication system (4 providers)
            - âœ… FUSE token calculation engine
            - âœ… Activity processing system
            - âœ… Transaction management
            - âœ… Comprehensive test suite
            - âœ… Docker containerization
            - âœ… Health check endpoints

            ### ðŸ“¦ Deployment:
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production
            docker run -p 3000:3000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production
            ```
          draft: false
          prerelease: false

      - name: Production deployment summary
        run: |
          echo "ðŸŽ‰ Production deployment completed successfully!"
          echo "âœ… All tests passed"
          echo "âœ… Docker image built and tested"
          echo "âœ… Health checks passed"
          echo "âœ… GitHub release created"
          echo "ðŸ“¦ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production"
